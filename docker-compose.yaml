version: "3.9"

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: realmate
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: realmate_web
    command: >
      sh -c "poetry run python manage.py migrate &&
        poetry run python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin','admin@example.com','admin123')\" &&
        poetry run python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/code
    ports:
      - "80:8000"
    depends_on:
      - db
      - redis

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: realmate_celery
    command: >
      sh -c "poetry run celery -A realmate_challenge worker -l info"
    volumes:
      - ./backend:/code
    depends_on:
      - web
      - redis

  frontend:
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
    container_name: realmate_frontend
    ports:
      - "3000:3000"
    volumes:
    - ./frontend/dashboard:/app   # monta os arquivos do host no container
    - /app/node_modules           # evita conflito de node_modules entre host e container
    command: npm start